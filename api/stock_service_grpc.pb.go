// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/stock_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockService_GetLatestStockData_FullMethodName = "/stockapi.StockService/GetLatestStockData"
	StockService_StreamStockData_FullMethodName    = "/stockapi.StockService/StreamStockData"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	GetLatestStockData(ctx context.Context, in *GetLatestStockDataRequest, opts ...grpc.CallOption) (*StockData, error)
	StreamStockData(ctx context.Context, in *StreamStockDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockData], error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetLatestStockData(ctx context.Context, in *GetLatestStockDataRequest, opts ...grpc.CallOption) (*StockData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockData)
	err := c.cc.Invoke(ctx, StockService_GetLatestStockData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) StreamStockData(ctx context.Context, in *StreamStockDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], StockService_StreamStockData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamStockDataRequest, StockData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_StreamStockDataClient = grpc.ServerStreamingClient[StockData]

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility.
type StockServiceServer interface {
	GetLatestStockData(context.Context, *GetLatestStockDataRequest) (*StockData, error)
	StreamStockData(*StreamStockDataRequest, grpc.ServerStreamingServer[StockData]) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockServiceServer struct{}

func (UnimplementedStockServiceServer) GetLatestStockData(context.Context, *GetLatestStockDataRequest) (*StockData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestStockData not implemented")
}
func (UnimplementedStockServiceServer) StreamStockData(*StreamStockDataRequest, grpc.ServerStreamingServer[StockData]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStockData not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}
func (UnimplementedStockServiceServer) testEmbeddedByValue()                      {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetLatestStockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestStockDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetLatestStockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockService_GetLatestStockData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetLatestStockData(ctx, req.(*GetLatestStockDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_StreamStockData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStockDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).StreamStockData(m, &grpc.GenericServerStream[StreamStockDataRequest, StockData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockService_StreamStockDataServer = grpc.ServerStreamingServer[StockData]

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stockapi.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestStockData",
			Handler:    _StockService_GetLatestStockData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStockData",
			Handler:       _StockService_StreamStockData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/stock_service.proto",
}
